<?php

namespace App\Models;

use App\Api\CWLoader;
use App\Api\ICurrency;
use App\Api\Kinguin;
use App\Api\SteamGamesWapApi;
use App\Services\PaypalService;
use Carbon\Carbon;
use DLCSoft;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\URL;
use Nexway;
use PulkitJalan\GeoIP\GeoIP;

class Order extends Model
{
    use HasFactory;

    protected $table = 'order';
    public $timestamps = false;
    protected $fillable = [
        'user_id',
        'payment_method',
        'status',
        'total_price',
        'points2earn',
        'currency',
        'coupon_id',
        'discount',
        'fee',
        'gift_email',
        'country_code',
        'vat_rate',
        'vat_amount',
        'timestamp',
        'cj_event',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($query) {
            $query->timestamp = Carbon::now();
        });
    }

//    TODO :: Relationship Start
    public function orderProducts()
    {
        return $this->hasMany(OrderProduct::class, 'order_id');
    }
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

//    TODO :: Relationship End

    public function pay()
    {
        switch ($this->payment_method) {
            case 'paypal':
                return $this->payWithPaypal();
                break;
            case 'points':
                return $this->payWithPoints();
            case 'credit':
                return $this->payWithCredit();
            default:
//                Yii::app()->user->setFlash('warning','payment method not detected');
                return false;
        }
    }

    public function payWithPaypal()
    {
        $paypal = new PaypalService();
        return $paypal->payWithPayPal($this);
    }

    public function payWithPoints()
    {
//        $user = User::find($this->user_id);
        $user = User::find($this->user_id);

        if ($user->points >= $this->total_price) {
            $points_before = $user->points;
            $user->points -= $this->total_price;
//            $trans = DB::beginTransaction();
            DB::beginTransaction();
            try {
                if ($user->save()) {
                    $this->status = 'paid';
                    if (!$this->save())
                        throw new \Exception('Order could not complete. Our technical team has been notified');
                    else {
                        PointsActivity::create([
                            'user_id' =>  $user->id,
                            'type'    => 'order_payment',
                            'description' => 'Payment for order #' . $this->id,
                            'points_before' => $points_before,
                            'points_after'  => $user->points
                        ]);
//                        $url = Yii::app()->createUrl('order/view', ['id' => $this->id]);
                        $url = url("/order/view/", ['id'=>$this->id]);
                    }
                }
            } catch (\Exception $ex) {
                Log::error('Payment with points failed. Full error: '.$ex);
//                Log::error('Payment with points failed. Full error: ' . $ex);
                throw new \Exception('Order could not complete. Our technical team has been notified' . '400');
            }

            DB::commit();
            return true;
        }

        return false;
    }

    public function payWithCredit()
    {
        $user = User::find($this->user_id);

        if ($user->credit >= $this->total_price) {
            $credits_before = $user->credit;

            DB::beginTransaction();
            try {
                if ($user->save()) {
                    $this->status = 'paid';

                    if (!$this->save())
                        throw new \Exception('Order could not complete. Our technical team has been notified');
                    else {

                        CreditsActivity::create([
                            'user_id' => $user->id,
                            'type' => 'order_payment',
                            'description' => 'Payment for order #' . $this->id,
                            'change' => $this->total_price * -1,
                            'credits_before' => $credits_before,
                            'credits_after' => $user->credit
                        ]);
                        $url = url('order/view', ['id' => $this->id]);
                    }
                }
            } catch (\Exception $exception) {
                Log::error($exception);
                throw new \Exception( 'Order could not complete. Our technical team has been notified',400);
            }
            DB::commit();
            return true;
        }

        return false;
    }


    public function fetchProductUnits()
    {

        foreach ($this->orderProducts as $orderProduct) {
            $amount_to_fetch = $orderProduct->quantity - OrderProductUnit::where(['order_product_id' => $orderProduct->id])->count();

            if ($amount_to_fetch > 0) {
                switch ($orderProduct->product->type) {
                    case 'local':
                        DB::beginTransaction();
                        $done = false;
                        $attempt = 0;
                        while (!$done && $attempt < 3) {
                            try {
                                for ($i = 0; $i < $amount_to_fetch; $i++) {
                                    $productUnit = ProductUnit::where('
											SELECT * FROM product_unit
											WHERE product_id = :product_id
											AND status = "free"
											FOR UPDATE
										',
                                        [':product_id' => $orderProduct->product_id]
                                    );
                                    if ($productUnit) {
                                        $orderProductUnit = new OrderProductUnit();
                                        $orderProductUnit->order_product_id = $orderProduct->id;
                                        $orderProductUnit->product_unit_id = $productUnit->id;
                                        if ($orderProductUnit->save()) {
                                            $productUnit->status = 'sold';
                                            if (!$productUnit->save()) {
                                                Log::error("Product unit could not be saved");
//                                                throw new \Exception("Product unit could not be saved");
                                            }
                                        } else {
                                            Log::error("OrderProductUnit could not be saved: Errors:" . implode(',',
                                                    $orderProductUnit->errors));
//                                            throw new \Exception("OrderProductUnit could not be saved");
                                        }
                                    } else {
                                        break;
                                    }
                                }
                                $orderProduct->product->refreshStock();
                                $orderProduct->product->notifyIfOutOfStock();
                                DB::commit();
                                $done = true;
                            } catch (\Exception $exception) {
                                DB::rollback();
                            }
                            $attempt++;
                        }
                        break;
                    case 'steamgameswap':
                        $sgs = new SteamGamesWapApi();
                        $keys = $sgs->buy($orderProduct->product->sgs_product_id, $amount_to_fetch);
                        foreach ($keys as $sgs_key) {
                            $productUnit = new ProductUnit();
                            $productUnit->product_id = $orderProduct->product_id;
                            $productUnit->status = 'sold';
                            if ($productUnit->save()) {
                                $product_key = new ProductKey();
                                $product_key->product_unit_id = $productUnit->id;
                                $product_key->stock_method = 'steamgameswap';
                                $product_key->serial = $sgs_key->serial;
                                $product_key->title = $productUnit->product->title;
                                $product_key->type = 'serial';
                                $product_key->cost = $sgs_key->cost;
                                $product_key->used = 0;
                                $supplier = Supplier::model()->findByAttributes(['name' => 'sgs_live']);
                                if (empty($supplier)) {
                                    $supplier = new Supplier();
                                    $supplier->name = 'sgs_live';
                                    $supplier->save();
                                }
                                $product_key->supplier_id = $supplier->id;
                                if ($product_key->save()) {
                                    $orderProductUnit = new OrderProductUnit();
                                    $orderProductUnit->product_unit_id = $productUnit->id;
                                    $orderProductUnit->order_product_id = $orderProduct->id;
                                    if (!$orderProductUnit->save()) {
                                        Log::info("OrderProductUnit could not be saved: Errors:" . implode(',',
                                                $orderProductUnit->errors));
                                        //throw new CException("OrderProductUnit could not be saved");
                                    }
                                } else {
                                    Log::error("ProductKey could not be saved: Errors:" . implode(',',
                                            $product_key->errors));
                                    //throw new CException("ProductKey could not be saved");
                                }
                            } else {
                                //TODO
                                //print_r($productUnit->errors);exit;
                            }
                        }
                        $orderProduct->product->refreshStock();
                        break;
                    case 'codeswholesale':
                        if (empty($orderProduct->cw_order_id)) {
                            $client = CWLoader::getClient();
                            $rate = ICurrency::getRate('EUR');
                            try {
                                $_SESSION["php-oauth-client"] = array();
                                /**
                                 * Sample products
                                 */
                                // $url = "https://sandbox.codeswholesale.com/v1/products/33e3e81d-2b78-475a-8886-9848116f5133"; // - pre order product
                                //$url = "https://sandbox.codeswholesale.com/v1/products/04aeaf1e-f7b5-4ba9-ba19-91003a04db0a"; // - not enough balance
                                //$url = "https://sandbox.codeswholesale.com/v1/products/6313677f-5219-47e4-a067-7401f55c5a3a"; // - image code
                                //$url = "https://sandbox.codeswholesale.com/v1/products/ffe2274d-5469-4b0f-b57b-f8d21b09c24c";    // - code text
                                if (Setting::getSetting('cw_test_mode') == 'sandbox') {
                                    $url = "https://sandbox.codeswholesale.com/v1/products/ffe2274d-5469-4b0f-b57b-f8d21b09c24c";    // - code text
                                } else {
                                    $url = $orderProduct->product->cw_product_id;
                                }
                                $product = \CodesWholesale\Resource\Product::get($url);
                                /**
                                 * Make an order for this particular product
                                 */
                                $codes = \CodesWholesale\Resource\Order::createBatchOrder($product,
                                    ['quantity' => $amount_to_fetch]);
                                foreach ($codes as $code) {
                                    /**
                                     * There are 3 possible code types returned from CW.
                                     *
                                     * Pre Order (when codes are not in stock)
                                     */
                                    if ($code->isPreOrder()) {
                                        // nothing much to do with PreOrdered code - we are working on Post Back functionality,
                                        // CW will send you a post back information
                                        // once the code is added to your order, post back will be send directly to your website.
                                        // For now you can send an notification email
                                        //echo "Pre-order";
                                    }
                                    /**
                                     * Code as a TEXT
                                     */
                                    $productUnit = new ProductUnit();
                                    $productUnit->product_id = $orderProduct->product_id;
                                    $productUnit->status = 'sold';
                                    if ($code->isText()) {
                                        if ($productUnit->save()) {
                                            $product_key = new ProductKey();
                                            $product_key->product_unit_id = $productUnit->id;
                                            $product_key->stock_method = 'codeswholesale';
                                            $product_key->serial = $code->getCode();
                                            $product_key->title = $productUnit->product->title;
                                            $product_key->type = 'serial';
                                            $product_key->cost = $product->getPrice();
                                            $product_key->used = 0;
                                            $supplier = Supplier::where(['name' => 'cw_live'])->first();
                                            if (empty($supplier)) {
                                                $supplier = new Supplier();
                                                $supplier->name = 'cw_live';
                                                $supplier->save();
                                            }
                                            $product_key->supplier_id = $supplier->id;
                                            if ($product_key->save()) {
                                                $orderProductUnit = new OrderProductUnit();
                                                $orderProductUnit->product_unit_id = $productUnit->id;
                                                $orderProductUnit->order_product_id = $orderProduct->id;
                                                if (!$orderProductUnit->save()) {
                                                    //TODO
                                                    print_r($orderProductUnit->errors);
                                                    exit;
                                                }
                                            } else {
                                                //TODO
                                                print_r($product_key->errors);
                                                exit;
                                            }
                                        } else {
                                            //TODO
                                            print_r($productUnit->errors);
                                            exit;
                                        }
                                    }
                                    /**
                                     * Code as a IMAGE
                                     */
                                    if ($code->isImage()) {
                                        if ($productUnit->save()) {
                                            $product_key = new ProductKey();
                                            $product_key->product_unit_id = $productUnit->id;
                                            $product_key->stock_method = 'codeswholesale';
                                            $product_key->title = $productUnit->product->title;
                                            $product_key->type = 'image';
                                            $product_key->filename = $code->getFileName();
                                            $usdCost = $product->getPrice() / $rate;
                                            $product_key->cost = sprintf('%.2f', $usdCost);
                                            $product_key->used = 0;
                                            $supplier = Supplier::where(['name' => 'cw_live'])->first();
                                            if (empty($supplier)) {
                                                $supplier = new Supplier();
                                                $supplier->name = 'cw_live';
                                                $supplier->save();
                                            }
                                            $product_key->supplier_id = $supplier->id;
                                            if ($product_key->save()) {
                                                $product_unit_folder = '';
//                                                $product_unit_folder = Yii::getPathOfAlias('webroot') . '/protected/product_files/' . $product_key->product_unit_id . '/';
                                                if (!is_dir($product_unit_folder)) {
                                                    mkdir($product_unit_folder);
                                                }
//                                                \CodesWholesale\Util\CodeImageWriter::write($code,
//                                                    $product_unit_folder);
                                                $orderProductUnit = new OrderProductUnit();
                                                $orderProductUnit->product_unit_id = $productUnit->id;
                                                $orderProductUnit->order_product_id = $orderProduct->id;
                                                if (!$orderProductUnit->save()) {
                                                    //TODO
                                                    print_r($orderProductUnit->errors);
                                                    exit;
                                                }
                                            }
                                        }
                                    }
                                }
                                $orderProduct->cw_order_id = $codes->getOrderId();
                                $orderProduct->cw_cost_each = $product->getLowestPrice();
                                $orderProduct->save();
                            } catch (\CodesWholesale\Resource\ResourceError $e) {

                                if ($e->isInvalidToken()) {
                                    //throw new CHttpException('400','An unexpected error occurred. Our technical team has been notified');
                                } else // handle scenario when account's balance is not enough to make order
                                {
                                    if ($e->getStatus() == 400 && $e->getErrorCode() == 10002) {
//                                        IwebEmail::send(Yii::app()->params['adminEmail'],
//                                            Yii::app()->params['adminEmail'], 'Codewholesale balance low',
//                                            "Codewholesale's balance is not enough for a transaction! Order id: " . $orderProduct->order_id);
                                    } else // handle scenario when product was not found in price list
                                    {
                                        if ($e->getStatus() == 404 && $e->getErrorCode() == 20001) {
//                                            IwebEmail::send(Yii::app()->params['adminEmail'],
//                                                Yii::app()->params['adminEmail'], 'Codewholesale product obsolete',
//                                                "Codewholesale product is no longer available and can't be fulfilled! Order id: " . $orderProduct->order_id);
                                        } else {
                                            // handle general app error
                                            // Log it to database, and give us a shout if it's our false at devteam@codeswholesale.com
//                                            IwebEmail::send(Yii::app()->params['adminEmail'],
//                                                Yii::app()->params['adminEmail'], 'Codewholesale generic error',
//                                                "ErrorCode:" . $e->getErrorCode() . "<br>Info:" . $e->getMoreInfo() . "<br>DeveloperMsg:" . $e->getDeveloperMessage() . "<br>Msg:" . $e->getMessage() . "<br>Order id: " . $orderProduct->order_id);
                                            //echo $e->getCode();
                                            //echo $e->getErrorCode();
                                            //echo $e->getMoreInfo();
                                            //echo $e->getDeveloperMessage();
                                            //echo $e->getMessage();
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case 'kinguingames':

                        if ($orderProduct->product['kinguin_product_id']) {
                            $id = $orderProduct->product['kinguin_product_id'];
                            $qty = $orderProduct->quantity;
                            $kinguinApi = new Kinguin();
                            $codes = $kinguinApi->SerialKey($id, $qty);


                            foreach ($codes as $code) {
                                /**
                                 * Code as a TEXT
                                 */
                                $productUnit = new ProductUnit();
                                $productUnit->product_id = $orderProduct->product_id;
                                $productUnit->status = 'sold';

                                if ($code->type == 'text/plain') {

                                    if ($productUnit->save()) {
                                        $product_key = new ProductKey();
                                        $product_key->product_unit_id = $productUnit->id;
                                        $product_key->stock_method = 'kinguin';
                                        $product_key->serial = $code->serial;
                                        $product_key->title = $code->name;
                                        $product_key->type = 'serial';
                                        $product_key->cost = $orderProduct->product->price;
                                        $product_key->used = 0;

                                        $supplier = Supplier::where(['name' => 'kinguin'])->first();
                                        if (empty($supplier)) {
                                            $supplier = new Supplier();
                                            $supplier->name = 'kinguin';
                                            $supplier->save();
                                        }
                                        $product_key->supplier_id = $supplier->id;
                                        if ($product_key->save()) {
                                            $orderProductUnit = new OrderProductUnit();
                                            $orderProductUnit->product_unit_id = $productUnit->id;
                                            $orderProductUnit->order_product_id = $orderProduct->id;
                                            if (!$orderProductUnit->save()) {
                                                //TODO
                                                print_r($orderProductUnit->errors);
                                                exit;
                                            }
                                        } else {
                                            //TODO
                                            print_r($product_key->errors);
                                            exit;
                                        }
                                    } else {
                                        //TODO
                                        print_r($productUnit->errors);
                                        exit;
                                    }
                                }
                                /**
                                 * Code as a IMAGE
                                 */
                                if ($code->type != 'text/plain') {

                                    if ($productUnit->save()) {
                                        $user_id = $orderProduct->order->user_id;
                                        $title = $code->name;
                                        $type = $code->type;
                                        $dataType = explode('/', $type);
                                        $extension = '.' . $dataType[1];
                                        $fileName = $user_id . '_' . $title . $extension;
                                        $product_key = new ProductKey();
                                        $product_key->product_unit_id = $productUnit->id;
                                        $product_key->stock_method = 'kinguin';
                                        $product_key->title = $code->name;
                                        $product_key->type = 'image';
                                        $product_key->filename = $fileName;
                                        $product_key->cost = $orderProduct->product->price;
                                        $product_key->used = 0;
                                        $supplier = Supplier::where(['name' => 'kinguin'])->first();
                                        if (empty($supplier)) {
                                            $supplier = new Supplier();
                                            $supplier->name = 'kinguin';
                                            $supplier->save();
                                        }
                                        $product_key->supplier_id = $supplier->id;
                                        if ($product_key->save()) {
                                            $product_unit_folder = '';
//                                            $product_unit_folder = Yii::getPathOfAlias('webroot') . '/protected/kinguin_files/' . $product_key->product_unit_id . '/';
                                            if (!is_dir($product_unit_folder)) {
                                                mkdir($product_unit_folder);
                                            }
                                            $kinguinApi->write($code, $product_unit_folder, $fileName);
                                            $orderProductUnit = new OrderProductUnit();
                                            $orderProductUnit->product_unit_id = $productUnit->id;
                                            $orderProductUnit->order_product_id = $orderProduct->id;
                                            if (!$orderProductUnit->save()) {
                                                //TODO
                                                print_r($orderProductUnit->errors);
                                                exit;
                                            }
                                        }
                                    }
                                }
                            }
                            $orderProduct->save();
                        } else {

                        }
                        break;
                    case 'dlcsoftgames':
                        if ($orderProduct->product['dlcsoft_product_id']) {
                            $id = $orderProduct->product['dlcsoft_product_id'];
                            $qty = $orderProduct->quantity;
                            $dlcsoftApi = new DLCSoft();

                            for ($i = 1; $i <= $qty; $i++) {
                                $data = $dlcsoftApi->Authentication();

                                if ($data->token) {
                                    $code = $dlcsoftApi->claimCode($id, $data->token);
                                    if ($code) {
                                        /**
                                         * Code as a TEXT
                                         */
                                        $productUnit = new ProductUnit();
                                        $productUnit->product_id = $orderProduct->product_id;
                                        $productUnit->status = 'sold';
                                        if ($productUnit->save()) {
                                            $product_key = new ProductKey();
                                            $product_key->product_unit_id = $productUnit->id;
                                            $product_key->stock_method = 'dlcsoft';
                                            $product_key->serial = $code;
                                            $product_key->title = $orderProduct->product->title;
                                            $product_key->type = 'serial';
                                            $product_key->cost = $orderProduct->product->price;
                                            $product_key->used = 0;
                                            $supplier = Supplier::where(['name' => 'dlcsoft'])->first();
                                            if (empty($supplier)) {
                                                $supplier = new Supplier();
                                                $supplier->name = 'dlcsoft';
                                                $supplier->save();
                                            }
                                            $product_key->supplier_id = $supplier->id;
                                            if ($product_key->save()) {
                                                $orderProductUnit = new OrderProductUnit();
                                                $orderProductUnit->product_unit_id = $productUnit->id;
                                                $orderProductUnit->order_product_id = $orderProduct->id;
                                                if (!$orderProductUnit->save()) {
                                                    //TODO
                                                    print_r($orderProductUnit->errors);
                                                    exit;
                                                }
                                            } else {
                                                //TODO
                                                print_r($product_key->errors);
                                                exit;
                                            }
                                        } else {
                                            //TODO
                                            print_r($productUnit->errors);
                                            exit;
                                        }
                                    }

                                }
                            }
                            $dlcsoft_balance = Setting::where(array('name' => 'dlcsoft_balance'))->first();
                            $balance = $dlcsoft_balance->value - $orderProduct->product->dlcsoft_cost_price * $qty * 1.2;
                            $dlcsoft_balance->value = sprintf('%.2f', $balance);
                            $dlcsoft_balance->update();
                            $orderProduct->save();
                        }
                        break;
                    case 'nexwaygames':
                        if ($orderProduct->product['nexway_product_id']) {
                            $id = $orderProduct->product['nexway_product_id'];

                            $userIp =auth()->user()->getIp();
                            $geoIp = new GeoIP();
                            $geoIp->setIp($userIp);
                            $iso = $geoIp->getCountryCode();
                            if ($iso) {

                                $iso = strtolower($iso);
                                $RegionList = NexwayRegionList::where(['code' => $iso])->first();
                                $feed = $RegionList->feed;
                            }
                            $nexwayId = $this->getNexwayId($id, $feed);
                            $qty = $orderProduct->quantity;
                            $nexwayApi = new Nexway();

                            $newOrder = $nexwayApi->CreateOrder($nexwayId, $qty, $this->id, $orderProduct->product->id, $feed, $iso);
                            $orderData = $nexwayApi->GetOrderData($this->id, $feed);
//                            $folder = Yii::getPathOfAlias('webroot') . '/protected/nexway_files/';
//
//                            if (!is_dir($folder)) {
//                                mkdir($folder);
//                            }

                            $fileName = '$folder' . 'order.txt';
                            $handle = fopen($fileName, 'a+');
                            fwrite($handle, print_r($newOrder, true));
                            fclose($handle);
                            $codes = $orderData->orderLines[0]->lineItems[0]->serials;

                            foreach ($codes as $code) {
                                if ($code->data) {
                                    /**
                                     * Code as a TEXT
                                     */
                                    $productUnit = new ProductUnit();
                                    $productUnit->product_id = $orderProduct->product_id;
                                    $productUnit->status = 'sold';
                                    if ($productUnit->save()) {
                                        $product_key = new ProductKey();
                                        $product_key->product_unit_id = $productUnit->id;
                                        $product_key->stock_method = 'nexway';
                                        $product_key->serial = $code->data;
                                        $product_key->title = $orderProduct->product->title;
                                        $product_key->type = 'serial';
                                        $product_key->cost = $orderProduct->product->price;
                                        $product_key->used = 0;
                                        $supplier = Supplier::where(['name' => 'nexway'])->fisrt();
                                        if (empty($supplier)) {
                                            $supplier = new Supplier();
                                            $supplier->name = 'nexway';
                                            $supplier->save();
                                        }
                                        $product_key->supplier_id = $supplier->id;
                                        if ($product_key->save()) {
                                            $orderProductUnit = new OrderProductUnit();
                                            $orderProductUnit->product_unit_id = $productUnit->id;
                                            $orderProductUnit->order_product_id = $orderProduct->id;
                                            if (!$orderProductUnit->save()) {
                                                //TODO
                                                print_r($orderProductUnit->errors);
                                                exit;
                                            }
                                        } else {
                                            //TODO
                                            print_r($product_key->errors);
                                            exit;
                                        }
                                    } else {
                                        //TODO
                                        print_r($productUnit->errors);
                                        exit;
                                    }
                                }

                            }

                        }
                        break;
                }

            }
        }
    }


    public function getNexwayId($product_id, $feed)
    {
//	    var_dump($product_id);
//	    var_dump($feed);die();
        $name = 'nexway_products_' . strtoupper($feed);
        $setting = Setting::model()->findByAttributes(array('name' => $name));
        if (($h = fopen($setting->value, "r")) !== FALSE) {
            while (($data = fgetcsv($h, 1000, ",")) !== false) {
                if ($data[8] == $product_id) {
                    return $data[0];
                }
            }
            fclose($h);
        }
    }


    public function giveCashbackPoints()
    {
        if ($this->payment_method == 'paypal') {
            $user = User::find($this->user_id);
            $points_before = $user->points;
            $user->points += $this->points2earn;
            $user->save();
            PointsActivity::create([
                'user_id' => $user->id,
                'type' => 'order_cashback',
                'description' => 'Cashback for order #' . $this->id,
                'change' => $this->points2earn,
                'points_before' => $points_before,
                'points_after' => $user->points
            ]);
            $url = url('order/view', ['id' => $this->id]);
            return $url;
//            Notification::addNotification('You earned ' . ICurrency::priceFormat($this->points2earn, 'POINTS') . ' for your Order #' . $this->id, null, false, $url);
        }
    }

    public function updateStatus()
    {
        if ($this->status == 'paid') {

            $complete = true;
            foreach ($this->orderProducts as $orderProduct) {

                if ($orderProduct->quantity > OrderProductUnit::where(['order_product_id' => $orderProduct->id])->count()) {
                    $complete = false;
                    break;
                }
//                elseif ($orderProduct->quantity < OrderProductUnit::where(['order_product_id' => $orderProduct->id])->count()) {
////                    IwebEmail::send(Yii::app()->params['adminEmail'], Yii::app()->params['adminEmail'], 'Order got more keys than it should',
////                        'Order #' . $this->id . ' got more keys than it should. Pass this information to the developer in charge'
////                    );
//                }
            }


            if ($complete) {
                $this->status = 'finished';

                $this->save();
                $url = url('order/view', ['id' => $this->id]);
//                Notification::addNotification('Order #' . $this->id . ' has been fulfilled.', $this->user_id, false, $url);
            }
        }
    }


    public function rewardPublisher()
    {
        foreach ($this->orderProducts as $orderProduct) {
            $product = $orderProduct->product;
            if (!empty($product->publisher_id) && !empty($product->publisher_percentage)) {

                $orderProduct->publisher_percentage = $product->publisher_percentage;
                $amount = $product->price * $orderProduct->quantity;
                $amount = $amount * ($product->publisher_percentage / 100);
                $orderProduct->publisher_earnings = sprintf('%.2f', $amount);
                $orderProduct->save();

            }
        }
    }

    public function updateCoupon()
    {
        $coupon = Coupon::find($this->coupon_id);

        if ($coupon && $coupon->limit_type == 'uses' && $coupon->uses > 0) {
            $coupon->uses -= 1;
            $coupon->save();
        }
    }

    public function statusLabel()
    {
        switch ($this->status) {
            case 'unpaid':
                return "<label class='label label-danger pull-right'>Not Paid</label>";
            //case 'paid':
            //	return "<label class='label label-warning pull-right'>Paid - Fetching serial keys</label>";
            case 'finished':
                return "<label class='label label-success pull-right'><i class='fa fa-check'></i></label>";
        }
    }

    // @TODO This method seems to be deprecated. Check and remove
    public function giveAchievement()
    {
        // Check referral achievement
        $referral = Referral::model()->findByAttributes(['recruit_id' => $this->user_id]);
        if ($referral) {
            if (count($this->user->orders) == 1) {
                Achievement::increase($referral->recruiter_id, 'referral');
            }
        }
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * based on the search/filter conditions.
     */
    public function search($pageSize = 10)
    {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('user_id', $this->user_id);
        $criteria->compare('payment_method', $this->payment_method, true);
        $criteria->compare('status', $this->status);
        $criteria->addCondition('status != "unpaid"');
        $criteria->compare('total_price', $this->total_price);
        $criteria->compare('currency', $this->currency, true);
        $criteria->compare('coupon_id', $this->coupon_id);
        $criteria->compare('discount', $this->discount);
        if (!empty($_GET['PaypalPayment']['transaction_id'])) {
            $criteria->join = "INNER JOIN paypal_payment on t.id = paypal_payment.order_id";
            $criteria->compare('transaction_id', trim($_GET['PaypalPayment']['transaction_id']), true);
        }

        $release_daterange = new IDateRangeWidget($this, 'timestamp');
        $release_daterange->updateCriteria($criteria);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort' => array(
                'defaultOrder' => 'id DESC',
            ),
            'pagination' => array('pageSize' => $pageSize)
        ));
    }

    public function gridUser()
    {
        $optionsHtml = '';
        $optionsHtml .= '<a style="word-break:break-all;" href="' . Yii::app()->createUrl('adminUser/index', ['User[id]' => $this->user_id]) . '" target="_blank"><p>#' . $this->user_id . '<br><b>' . $this->user->username . '</b></p></a>';
        return $optionsHtml;
    }

    public function myOrdersDataprovider($pagesize = 10)
    {
        $criteria = new CDbCriteria;

        $criteria->compare('user_id', Yii::app()->user->id);
        $criteria->addCondition('status != "unpaid"');

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'pagination' => array('pageSize' => $pagesize),
            'sort' => array(
                'defaultOrder' => 'id DESC',
            )
        ));
    }

    public function gridTotalPrice()
    {
        return ICurrency::priceFormat($this->total_price, $this->currency);
    }

    public function gridVat()
    {
        if ($this->vat_amount > 0) {
            return '<p class="control-label" style="color:#333;">' . $this->vat_rate . '% ' . ICurrency::priceFormat($this->vat_amount, $this->currency) . '</p>';
        }
        return '';
    }

    public function gridProducts()
    {
        $html = '';
        foreach ($this->orderProducts as $orderProduct) {
            $html .= '<p class="control-label" style="color:#333;">' . $orderProduct->quantity . 'x ' . $orderProduct->product->title . '</p>';
        }

        return $html;
    }

    public function gridFee()
    {
        return ICurrency::priceFormat($this->fee, $this->currency);
    }

    public function gridPaypal()
    {
        if ($this->paypalPayment) {
            echo "<p style='word-break: break-all;'>" . $this->paypalPayment->transaction_id . "</p>";
        }
    }

    public function gridCoupon()
    {
        if ($this->coupon) {
            echo "<p style='word-break: break-all;'>" . $this->coupon->name . "</p>";
            if ($this->coupon->amount_type == 'percent')
                echo "<p style='word-break: break-all;'>" . $this->coupon->amount . "% OFF</p>";
            else
                echo "<p style='word-break: break-all;'>$" . $this->coupon->amount . " OFF</p>";

        }
    }


    public function gridDateReceived()
    {
        $date_received = $this->timestamp;
        $date_received_date = date("d.m.Y", strtotime($date_received));
        $date_received_time = date("H:i:s", strtotime($date_received));
//        $icon = Yii::app()->getBaseUrl(true) . '/images/calendar.png';
        $icon = \url(true).'/images/calendar.png';
        echo "<img class='account-order-date-received-icon' src = '$icon'  alt='calendar'/>";
        echo "<p class='account-order-date-received-date'> $date_received_date </p>";
        echo "<p class='account-order-date-received-time'> $date_received_time </p>";
    }


    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Order the static model class
     */
    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }
}
