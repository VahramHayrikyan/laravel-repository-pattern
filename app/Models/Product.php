<?php

namespace App\Models;

use App\Api\CWLoader;
use App\Api\ICurrency;
use App\Api\SteamGamesWapApi;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Facades\DB;
use PulkitJalan\GeoIP\GeoIP;

class Product extends Model
{
    use HasFactory;

    public $timestamps = false;
    protected $table = 'product';
    protected $fillable = [
        'steam_app_id',
        'publisher_id',
        'publisher_percentage',
        'product_category_id',
        'type',
        'autoselect',
        'title',
        'seo_url',
        'description',
        'image',
        'youtube_id',
        'normal_price_usd',
        'normal_price_eur',
        'normal_price_gbp',
        'price',
        'hard_price',
        'dlcsoft_cost_price',
        'points_price',
        'hard_points',
        'cashback_points_per_dollar',
        'featured',
        'staff_pick',
        'staff_pick_image',
        'staff_pick_background',
        'max_purchases',
        'hide_stock',
        'always_visible',
        'preorder',
        'release_date',
        'skip_release_date_updates',
        'show_in_pointshop',
        'force_show_in_pointshop',
        'hide_from_store',
        'cw_product_id',
        'genba_product_id',
        'sgs_product_id',
        'kinguin_product_id',
        'dlcsoft_product_id',
        'nexway_product_id',
        'kinguin_page_number',
        'profit_margin',
        'hard_profit_margin',
        'stock',
        'views',
        'game_publisher',
        'game_developer',
        'timestamp',
    ];

    static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($query) {
            $query->timestamp = Carbon::now();
        });
    }
// Relationship Start
    /**
     * @return HasMany
     */
    public function tags(): HasMany
    {
        return $this->hasMany(Tag::class, 'product_id', 'id');
    }

    /**
     * @return BelongsTo
     */
    public function productCategory(): BelongsTo
    {
        return $this->belongsTo(ProductCategory::class,'product_category_id','id');
    }

    public function productTags(): HasMany
    {
        return $this->hasMany(Tag::class,'product_id','id');
    }

    public function productAchievement(): HasMany
    {
        return $this->hasMany(ProductAchievement::class,'product_id','id');
    }
// Relationship end

    public function getTimeStampAttribute(): Carbon
    {
        return Carbon::parse($this->attributes['timestamp']);
    }
    public function getImageUrl(): string
    {
        return $this->url . '/uploads/product/' . $this->id . '/' . $this->image;
    }

    public function getStaffPickImageUrl()
    {
        return $this->url . '/uploads/product/' . $this->id . '/' . $this->staff_pick_image;
    }

    public function getStaffPickBackgroundUrl()
    {
        return $this->url . '/uploads/product/' . $this->id . '/' . $this->staff_pick_background;
    }

    public function getRoundedRating()
    {
        return sprintf('%.2f', $this->avgRating);
    }

    public function getPlatformsArray()
    {
        $platforms = $this->tags()->where('category', 'platform')->pluck('name');
        foreach ($platforms as $platform) {
            switch (strtolower($platform)) {
                case 'windows':
                case 'pc':
                    echo "<i class='fa fa-windows px-1 hover' data-toggle='tooltip' data-original-title='Windows' style='font-size:19px;color: #FFF;'></i>";
                    break;
                case 'mac':
                    echo "<i class='fa fa-apple px-1 hover' data-toggle='tooltip' data-original-title='Mac' style='font-size:19px;color: #FFF;'></i>";
                    break;
                case 'linux':
                    echo "<i class='fa fa-linux px-1 hover' data-toggle='tooltip' data-original-title='Linux' style='font-size:19px;color: #FFF;'></i>";
                    break;
                case 'ps3':
                    echo "<img data-toggle='tooltip' data-original-title='Playstation 3' style='height:19px;width: 30px; margin: 0 5px' src='assets/v2/img/platform_icons/ps3.png' />";
                    break;
                case 'ps4':
                    echo "<img data-toggle='tooltip' data-original-title='Playstation 4' style='height:19px;width: 30px; margin: 0 5px' src='assets/v2/img/platform_icons/ps4.png' />";
                    break;
                case 'psvita':
                    echo "<img data-toggle='tooltip' data-original-title='Playstation Vita' style='height:19px;width: 30px; margin: 0 5px' src='assets/v2/img/platform_icons/psvita.png' />";
                    break;
                case 'xbox 360':
                    echo "<img data-toggle='tooltip' data-original-title='XBOX 360' style='height:19px;width: 30px; margin: 0 5px' src='assets/v2/img/platform_icons/xbox360.png' />";
                    break;
                case 'xbox one':
                    echo "<img data-toggle='tooltip' data-original-title='XBOX ONE' style='height:19px;width: 30px; margin: 0 5px' src='assets/v2/img/platform_icons/xboxone.png' />";
                    break;
            }
        }
    }

    public function getLocalStock()
    {
        return ProductUnit::where(array(
            'product_id'=>$this->id,
            'status'=>'free'
        ))->count();
    }

    public function refreshStock()
    {
        if ($this->type == 'local'){
            $this->stock = $this->getLocalStock();
            $this->save();
        }
        elseif ($this->type == 'steamgameswap')
        {
            $api = new SteamGamesWapApi();
            $product = $api->getGameData($this->sgs_product_id);
            $this->stock = $product->stock;
            $this->save();
        }
        elseif($this->type == 'codeswholesale')
        {
            $client = CWLoader::getClient();
            $cw_product = \CodesWholesale\Resource\Product::get($this->cw_product_id);
            $this->stock = $cw_product->getStockQuantity();
            if ($this->hard_price == null)
            {
                $exchangeRate = ExchangeRate::where(['name'=>'EUR'])->first();
                $usd_price = $cw_product->getLowestPrice() * (1+$this->profit_margin/100) / $exchangeRate->rate;
                $this->price =  sprintf('%.2f',$usd_price);
                $thresholdSetting = Setting::where(['name' => 'trove_cost_threshold'])->first();
                $threshold = $thresholdSetting[0]->value;
                $multiplierSetting = Setting::where(['name' => 'trove_points_multiplier'])->first();
                $multiplier = $multiplierSetting[0]->value;
                if (isset($this->hard_points) && $this->hard_points != ''){
                    $this->points_price = $this->hard_points;
                }else{
                    if ($this->price < $threshold){
                        $this->points_price = $this->price * $multiplier;
                    }else{
                        $this->points_price = $this->price * 1000;
                    }
                }
            }
            $this->save();
        }
    }

    public function buyMax()
    {
        if ($this->preorder)
        {
            if (!empty($this->max_purchases))
                return min($this->purchaseLimit(),100);
            else
                return 100;
        }
        else{
            if (!empty($this->max_purchases))
                return min($this->purchaseLimit(),$this->stock,100);
            else
                return min($this->stock,100);
        }
    }

    public function purchaseLimit()
    {
        if ($this->max_purchases == 0){
            return 1000;
        }
        else{
            return max($this->max_purchases - $this->countOrders(),0);
        }

    }

    public function countOrders($user_id = null)
    {
        if (!auth()->check())
            return 0;

        if (empty($user_id)){
            $user_id = auth()->id();
        }

        $orders = DB::table('order_product t')
            ->select('sum(quantity) as total')
            ->join('order','t.order_id = order.id')
            ->where('t.product_id = :productid AND order.user_id = :userid AND order.status != "unpaid"', [':productid'=>$this->id,':userid'=>$user_id])
            ->queryRow();

        return $orders['total'];
    }

    public function getFinalPrice($formatted=true, $currency=null, $checkForNexway=true)
    {
        if ($this->type == 'nexwaygames'){
            $price = $this->getPrice();
        }

        if ($currency == null)
        {
            $currency = auth()->user()->currency;
        }

        if ($currency == 'USD' && $this->type != 'nexwaygames'){
            $price = $this->price;
        }
        else{
            if($this->type == 'nexwaygames'){
                $price = ICurrency::convert($price, $currency);
            }else{
                $price = ICurrency::convert($this->price, $currency);

            }
        }

        if ($formatted)
        {
            if ($price == 0){
                return 'FREE';
            }

            $cn= new \NumberFormatter('en_us',\NumberFormatter::CURRENCY);
            return $cn->formatCurrency($price, $currency);
        }
        else{
            return $price;
        }

    }

    public function getPrice()
    {

        if ($this->type == 'nexwaygames') {
            $userIp = auth()->user()->getIp();
            $geoIp = new GeoIP();
            $geoIp->setIp($userIp);
            $iso = $geoIp->getCountryCode();
            if ($iso){
                $iso = strtolower($iso);
                $RegionList = NexwayRegionList::where(['code' => $iso])->first();
                $feed = $RegionList->feed;
                $nexwayPrice = NexwayPrices::where(['feed' => $feed,'product_id' => $this->id])->first();

                if ($nexwayPrice != null){
                    return $nexwayPrice->price;
                }

            }

        }

        return $this->price;
    }

    public function getPointsPrice()
    {

        if (isset($this->hard_points) && $this->hard_points != ''){
            $this->points_price = $this->hard_points;
        }
        return $this->points_price;
    }
    public function notifyIfOutOfStock()
    {
        if ($this->type == 'local' && $this->stock == 0)
        {
//            IwebEmail::send(Yii::app()->params['adminEmail'],Yii::app()->params['adminEmail'],'Product out of stock!','Product #'.$this->id.' '.$this->title.' is out of stock');

            if ($this->hard_points){
                $this->hard_points  = null;
            }
            if ($this->hard_price){
                $this->hard_price  = null;
            }
            $this->save();
        }
    }
}
